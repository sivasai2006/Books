#import pandas as pd
import sys
import json
from pyspark import SparkContext
from pyspark.streaming import StreamingContext
from pyspark.sql import Row, SparkSession


def getSparkSessionInstance(sparkConf):
    if ('sparkSessionSingletonInstance' not in globals()):
        globals()['sparkSessionSingletonInstance'] = SparkSession\
            .builder\
            .config(conf=sparkConf)\
            .getOrCreate()
    return globals()['sparkSessionSingletonInstance']


if __name__ == "__main__":
    sc = SparkContext(appName="PythonSqlStreamingWordCount")
    ssc = StreamingContext(sc, 10)

    # Create a socket stream on target ip:port and count the
    # words in input stream of \n delimited text (eg. generated by 'nc')
    lines = ssc.textFileStream("C:\\CodePlay\\dat")
    #lines=lines1[1:-1]
    words = lines.map(lambda x: x[2:-1] if x else x).flatMap(lambda y: y.split("],["))
    #d = pd.DataFrame(lines)
    # Convert RDDs of the words DStream to DataFrame and run SQL query
    def process(time, rdd):
        print("========= %s =========" % str(time))
        #print(rdd.collect())
        #for y in rdd.collect():
            #z = y.encode("ascii","replace")
            #print(z)
            #print(y)
        #   temp1 = json.loads(y)
        #   single_str = ','.join(str(v) for v in temp1)
        #  print(single_str)

            #for x in z:
            #    print(x)
        try:
            #sqlContext = new SQLContext(sc)
            #dfs = sqlContext.read.json("file:///c://employee.json")


            # Get the singleton instance of SparkSession
            spark = getSparkSessionInstance(rdd.context.getConf())

            # Convert RDD[String] to RDD[Row] to DataFrame
            rowRdd = rdd.map(lambda w: Row(word=w))
            wordsDataFrame = spark.createDataFrame(rowRdd)
            #wordsDataFrame = spark.read.json(rowRdd)
            # Creates a temporary view using the DataFrame.
            wordsDataFrame.createOrReplaceTempView("words")

            # Do word count on table using SQL and print it
            wordCountsDataFrame = spark.sql("select word as total from words")
            wordCountsDataFrame.show()
        except:
            pass

    words.foreachRDD(process)

    ssc.start()
    ssc.awaitTermination()


